{
	"name": "branch_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "employee1",
						"type": "DatasetReference"
					},
					"name": "employee1"
				},
				{
					"dataset": {
						"referenceName": "department_1",
						"type": "DatasetReference"
					},
					"name": "department1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "branch_output",
						"type": "DatasetReference"
					},
					"name": "sink"
				},
				{
					"dataset": {
						"referenceName": "innerjoin",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "aggregate"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          name as string,",
				"          country as string,",
				"          dept as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> employee1",
				"source(output(",
				"          deptid as string,",
				"          dept as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> department1",
				"employee1 aggregate(groupBy(dept),",
				"     empid = count(empid)) ~> aggregate",
				"employee1, department1 join(employee1@dept == department1@dept,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"aggregate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Movie_Name as string,",
				"          {movie type} as string,",
				"          view_count as string,",
				"          like_count as string,",
				"          comment_count as string,",
				"          Gender as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Movie_Name as string,",
				"          {movie type} as string,",
				"          view_count as string,",
				"          like_count as string,",
				"          comment_count as string,",
				"          Gender as string",
				"     ),",
				"     partitionFileNames:['innerjoin'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}